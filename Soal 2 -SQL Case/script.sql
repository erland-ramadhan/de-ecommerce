-- Create the table to match the dataset
CREATE TABLE ecommerce_data (
    fullVisitorId BIGINT,
    channelGrouping VARCHAR(255),
    country VARCHAR(255),
    city VARCHAR(255),
    totalTransactionRevenue FLOAT,
    transactions FLOAT,
    timeOnSite FLOAT,
    pageviews FLOAT,
    sessionQualityDim FLOAT,
    date INT,
    visitId BIGINT,
    productRefundAmount FLOAT,
    productQuantity FLOAT,
    productPrice INT,
    productRevenue FLOAT,
    v2ProductName VARCHAR(255),
    currencyCode VARCHAR(10)
);

-- Load data from the CSV file
COPY ecommerce_data
FROM '/path/to/your/file.csv'
DELIMITER ','
CSV HEADER;

-- Compute the total revenue for each channel grouping for the top 5 countries with the highest revenue

WITH country_revenue AS (
    SELECT 
        country,
        SUM(totalTransactionRevenue) AS total_revenue
    FROM ecommerce_data
    WHERE totalTransactionRevenue IS NOT NULL
    GROUP BY country
    ORDER BY total_revenue DESC
    LIMIT 5
)
SELECT 
    e.channelGrouping,
    e.country,
    SUM(e.totalTransactionRevenue) AS total_revenue
FROM ecommerce_data e
JOIN country_revenue c
ON e.country = c.country
WHERE e.totalTransactionRevenue IS NOT NULL
GROUP BY e.channelGrouping, e.country
ORDER BY total_revenue DESC;

-- Identify users who spend above-average time on the site but view fewer pages than the average user

WITH avg_metrics AS (
    SELECT 
        AVG(timeOnSite) AS avg_time_on_site,
        AVG(pageviews) AS avg_pageviews
    FROM ecommerce_data
    WHERE timeOnSite IS NOT NULL AND pageviews IS NOT NULL
)
SELECT 
    fullVisitorId,
    timeOnSite,
    pageviews
FROM ecommerce_data, avg_metrics
WHERE timeOnSite > avg_metrics.avg_time_on_site 
  AND pageviews < avg_metrics.avg_pageviews;

-- Compute the total revenue generated by each product
SELECT 
    v2ProductName,
    SUM(totalTransactionRevenue) AS total_revenue
FROM ecommerce_data
WHERE totalTransactionRevenue IS NOT NULL
GROUP BY v2ProductName
ORDER BY total_revenue DESC;

-- Determine the total quantity sold for each product
SELECT 
    v2ProductName,
    SUM(productQuantity) AS total_quantity_sold
FROM ecommerce_data
WHERE productQuantity IS NOT NULL
GROUP BY v2ProductName
ORDER BY total_quantity_sold DESC;

-- Calculate the total refund amount for each product
SELECT 
    v2ProductName,
    SUM(productRefundAmount) AS total_refund_amount
FROM ecommerce_data
WHERE productRefundAmount IS NOT NULL
GROUP BY v2ProductName
ORDER BY total_refund_amount DESC;

-- Rank products based on net revenue and flag products with refunds > 10% of total revenue
WITH product_revenue AS (
    SELECT 
        v2ProductName,
        COALESCE(SUM(totalTransactionRevenue), 0) AS total_revenue,
        COALESCE(SUM(productRefundAmount), 0) AS total_refund
    FROM ecommerce_data
    GROUP BY v2ProductName
),
net_revenue_ranking AS (
    SELECT 
        v2ProductName,
        total_revenue,
        total_refund,
        (total_revenue - total_refund) AS net_revenue,
        RANK() OVER (ORDER BY (total_revenue - total_refund) DESC) AS rank,
        CASE 
            WHEN total_refund > 0.1 * total_revenue THEN 'Flagged'
            ELSE 'Normal'
        END AS refund_flag
    FROM product_revenue
)
SELECT 
    v2ProductName,
    total_revenue,
    total_refund,
    net_revenue,
    rank,
    refund_flag
FROM net_revenue_ranking
ORDER BY rank;

